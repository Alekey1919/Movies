{"ast":null,"code":"var _jsxFileName = \"F:\\\\Alekey\\\\Programming\\\\React\\\\movies\\\\src\\\\components\\\\movieList\\\\MovieList.js\";\nimport React from \"react\";\nimport MovieListItem from \"../movieListItem/MovieListItem\";\nimport ExpandedMovieItem from \"../expandedMovieItem/ExpandedMovieItem\";\nimport useMovieList from \"./useMovieList\";\nimport { connect } from \"react-redux\";\nimport Loading from \"../../media/loading.svg\";\n\nfunction MovieList(props) {\n  const {\n    selectedMovie,\n    handleSelect,\n    handleClose,\n    movies,\n    isLoading,\n    lastMovieElementRef\n  } = useMovieList(props.sortingOptions);\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      src: Loading,\n      alt: \"Loading\",\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-list-f\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movie-list-f-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, movies.map((movie, key) => {\n    if (movies.length === key + 1) {\n      // If this is the last movie the ref is forwarded to keep track of the node and trigger the infinite scroll.\n      return /*#__PURE__*/React.createElement(MovieListItem, {\n        key: key,\n        ref: lastMovieElementRef,\n        movie: movie,\n        handleOnClick: handleSelect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 15\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(MovieListItem, {\n        key: key,\n        movie: movie,\n        handleOnClick: handleSelect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }\n      });\n    }\n  }), selectedMovie && /*#__PURE__*/React.createElement(ExpandedMovieItem, {\n    movie: selectedMovie,\n    handleCloseModal: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  })));\n}\n\nconst mapStateToProps = state => {\n  return {\n    sortingOptions: state.sortingOptions.sortingOptions\n  };\n}; // Since the sortingOptions component is in the navbar component and not in this one, this one has to be connected to the Redux store to access the current selected sort option\n\n\nexport default connect(mapStateToProps)(MovieList);","map":{"version":3,"sources":["F:/Alekey/Programming/React/movies/src/components/movieList/MovieList.js"],"names":["React","MovieListItem","ExpandedMovieItem","useMovieList","connect","MovieList","props","selectedMovie","handleSelect","handleClose","movies","isLoading","lastMovieElementRef","sortingOptions","Loading","map","movie","key","length","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,iBAAP,MAA8B,wCAA9B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAM;AACJC,IAAAA,aADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA;AANI,MAOFT,YAAY,CAACG,KAAK,CAACO,cAAP,CAPhB;;AASA,MAAIF,SAAJ,EAAe;AACb,wBAAO;AAAK,MAAA,GAAG,EAAEG,OAAV;AAAmB,MAAA,GAAG,EAAC,SAAvB;AAAiC,MAAA,SAAS,EAAC,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,MAAM,CAACK,GAAP,CAAW,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC1B,QAAIP,MAAM,CAACQ,MAAP,KAAkBD,GAAG,GAAG,CAA5B,EAA+B;AAC7B;AACA,0BACE,oBAAC,aAAD;AACE,QAAA,GAAG,EAAEA,GADP;AAEE,QAAA,GAAG,EAAEL,mBAFP;AAGE,QAAA,KAAK,EAAEI,KAHT;AAIE,QAAA,aAAa,EAAER,YAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD,KAVD,MAUO;AACL,0BACE,oBAAC,aAAD;AACE,QAAA,GAAG,EAAES,GADP;AAEE,QAAA,KAAK,EAAED,KAFT;AAGE,QAAA,aAAa,EAAER,YAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;AACF,GApBA,CADH,EAsBGD,aAAa,iBACZ,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAEA,aADT;AAEE,IAAA,gBAAgB,EAAEE,WAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBJ,CADF,CADF;AAiCD;;AAED,MAAMU,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLP,IAAAA,cAAc,EAAEO,KAAK,CAACP,cAAN,CAAqBA;AADhC,GAAP;AAGD,CAJD,C,CAMA;;;AACA,eAAeT,OAAO,CAACe,eAAD,CAAP,CAAyBd,SAAzB,CAAf","sourcesContent":["import React from \"react\";\r\nimport MovieListItem from \"../movieListItem/MovieListItem\";\r\nimport ExpandedMovieItem from \"../expandedMovieItem/ExpandedMovieItem\";\r\nimport useMovieList from \"./useMovieList\";\r\nimport { connect } from \"react-redux\";\r\nimport Loading from \"../../media/loading.svg\";\r\n\r\nfunction MovieList(props) {\r\n  const {\r\n    selectedMovie,\r\n    handleSelect,\r\n    handleClose,\r\n    movies,\r\n    isLoading,\r\n    lastMovieElementRef,\r\n  } = useMovieList(props.sortingOptions);\r\n\r\n  if (isLoading) {\r\n    return <img src={Loading} alt=\"Loading\" className=\"loading\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"movie-list-f\">\r\n      <div className=\"movie-list-f-grid\">\r\n        {movies.map((movie, key) => {\r\n          if (movies.length === key + 1) {\r\n            // If this is the last movie the ref is forwarded to keep track of the node and trigger the infinite scroll.\r\n            return (\r\n              <MovieListItem\r\n                key={key}\r\n                ref={lastMovieElementRef}\r\n                movie={movie}\r\n                handleOnClick={handleSelect}\r\n              />\r\n            );\r\n          } else {\r\n            return (\r\n              <MovieListItem\r\n                key={key}\r\n                movie={movie}\r\n                handleOnClick={handleSelect}\r\n              />\r\n            );\r\n          }\r\n        })}\r\n        {selectedMovie && (\r\n          <ExpandedMovieItem\r\n            movie={selectedMovie}\r\n            handleCloseModal={handleClose}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    sortingOptions: state.sortingOptions.sortingOptions,\r\n  };\r\n};\r\n\r\n// Since the sortingOptions component is in the navbar component and not in this one, this one has to be connected to the Redux store to access the current selected sort option\r\nexport default connect(mapStateToProps)(MovieList);\r\n"]},"metadata":{},"sourceType":"module"}